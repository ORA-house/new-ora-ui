[{"id":"24231751.e39998","type":"tab","label":"Flow 7"},{"id":"4b09b234.a9583c","type":"http in","z":"24231751.e39998","name":"","url":"/gettempdata","method":"get","upload":false,"swaggerDoc":"","x":230,"y":160,"wires":[["80b0f9e8.8347b8"]]},{"id":"80b0f9e8.8347b8","type":"function","z":"24231751.e39998","name":"set date and hour query","func":"var date = new Date();\nvar day = date.getDate();\nvar month = date.getMonth() + 1;\nvar year = date.getFullYear();\nvar hour = date.getHours();\n\nif(day < 10)\n    day = \"0\"+day;\n\nif(month < 10)\n    month = \"0\"+month;\n\nvar dateString = day+\"-\"+month+\"-\"+year;\n//var dateString = \"28-03-\"+year;\n\nif(hour < 10)\n    hour = \"0\"+hour;    \n//hour = \"16\";    \nquery = {\n    date: dateString,\n    hour: hour.toString()\n};\n\nmsg.payload = query;\n\nreturn msg;","outputs":1,"noerr":0,"x":450,"y":160,"wires":[["296e544b.a8a4bc","7aaef790.b5a318"]]},{"id":"7aaef790.b5a318","type":"mongodb3 in","z":"24231751.e39998","service":"_ext_","configNode":"672cf424.6d10bc","name":"get outdoor temperature","collection":"temp_data","operation":"find.toArray","x":710,"y":220,"wires":[["12ed4b26.028f95"]]},{"id":"296e544b.a8a4bc","type":"mongodb3 in","z":"24231751.e39998","service":"_ext_","configNode":"672cf424.6d10bc","name":"get indoor temperature","collection":"sample_temp_data","operation":"find.toArray","x":700,"y":100,"wires":[["e7766a70.ebfcd8"]]},{"id":"e7766a70.ebfcd8","type":"function","z":"24231751.e39998","name":"set  msg topic","func":"// var date = new Date();\n// var curMinute = date.getMinutes();\n// var curSec = date.getSeconds();\n\n// var documents = msg.payload;\n// var inTemp = [];\n// var times = [];\n// var i=0;\n\n// for(i = 0; i < documents.length; i++)\n// {\n//     var hour = documents[i].hour;\n//     var minutes = documents[i].minutes;\n\n//     var requiredMins = [];\n//     for(var minute in minutes)\n//     {\n//         if(minute == curMinute)\n//         {\n//             if(minute != 0)\n//                 requiredMins.push({\n//                     minute: minute-1,\n//                     values: minutes[minute-1]\n//                 });\n//             requiredMins.push({\n//                     minute: minute,\n//                     values: minutes[minute]\n//                 });\n//             break;\n//         }\n\n//     }\n    \n//   \tfor(var j=0; j<requiredMins.length; j++)\n//   \t{\n//         for(var second in requiredMins[j].values)\n//         {\n//             if(requiredMins.length == 1 || (!(j === 0 && second < curSec)))\n//             {\n//                 var time = hour+\":\";\n//                 var min = requiredMins[j].minute;\n                \n//                 if(min < 10)\n//                   time += \"0\"+min+\":\";\n//                 else time += min+\":\";\n                \n//                 if(second < 10)\n//                   time += \"0\"+second;\n//                 else time += second;\n                \n//                 times.push(time);\n//                 inTemp.push((requiredMins[j].values[second].power)%50);\n//             }\n//         }\n//   \t}\n// }\n\n\n// var data = {\n// \t\t labels: times,\n// \t\t datasets: [{\n// \t\t label: 'Indoor Temp',\n// \t\t data: inTemp,\n// \t\t borderColor: '#324463',\n// \t\t borderWidth: 1,\n// \t\t fill: false,\n// \t\t pointRadius: 0.5\n// \t }]\n//  };\n// var options =  {\n// \t legend: {\n// \t\t display: false,\n// \t\t\t labels: {\n// \t\t\t\t display: false\n// \t\t\t }\n// \t },\n// \t scales: {\n// \t\t yAxes: [{\n// \t\t\t ticks: {\n// \t\t\t\t beginAtZero:false,\n// \t\t\t\t fontSize: 10,\n// \t\t\t\t min: 10,\n// \t\t\t\t max: 30\n// \t\t\t }\n// \t\t }],\n// \t\t xAxes: [{\n// \t\t\t ticks: {\n// \t\t\t\t beginAtZero:true,\n// \t\t\t\t fontSize: 8\n// \t\t\t }\n// \t\t }]\n// \t },\n// \t animation: {\n// \t     duration: 0\n// \t },\n// \t //Boolean - If we want to override with a hard coded scale\n// \t scaleOverride: true,\n// \t //** Required if scaleOverride is true **\n// \t //Number - The number of steps in a hard coded scale\n//  \t scaleSteps: 10,\n// // \t //Number - The value jump in the hard coded scale\n//  \t scaleStepWidth: 10,\n// // \t //Number - The scale starting value\n//  \t scaleStartValue: 0\n// };\n\nmsg.topic = \"indoor_temp\";\n// msg.payload = data;\n// msg.payload = JSON.stringify({\n//     data: data\n// //    options: options\n// });\nreturn msg;","outputs":1,"noerr":0,"x":930,"y":100,"wires":[["408ffc58.25da44"]]},{"id":"12ed4b26.028f95","type":"function","z":"24231751.e39998","name":"set msg topic","func":"// var date = new Date();\n// var curMinute = date.getMinutes();\n\n// var documents = msg.payload;\n// var temp = [];\n// var times = [];\n// var i=0;\n\n// var hour = documents[documents.length - 1].hour;\n// var values = documents[documents.length - 1].minutes;\n\n// var requiredMins = [];\n// for(var minute in values)\n// {\n//     if(minute == curMinute)\n//     {\n//         if(minute != 0)\n//             requiredMins.push({\n//                 minute: minute-1,\n//                 value: values[minute-1]\n//             });\n//         requiredMins.push({\n//                 minute: minute,\n//                 value: values[minute]\n//             });\n//         break;\n//     }\n\n// }\n\n// var curSec = date.getSeconds();\n// var sec = curSec;\n// var maxSec = 60;\n\n// for(var j = 0; j < requiredMins.length; j++)\n// {\n//     var time = hour+\":\";\n//   \tvar minute = requiredMins[j].minute;\n//   \tvar value = requiredMins[j].value;\n  \t\n//   \tif(minute < 10)\n//   \t    time += \"0\"+minute;\n//   \telse time += minute;\n  \t\n//   \tfor(;sec<maxSec;sec++)\n//   \t{\n//       \tif(sec < 10)\n//   \t        times.push(time+\":0\"+sec);\n//   \t    else times.push(time+\":\"+sec);\n  \t    \n//       \ttemp.push(value);    \t    \n//   \t}\n//   \tsec = 0;\n//     maxSec = curSec+1;\n// }\n\nmsg.topic = \"outdoor_temp\";\n// msg.payload = {\n// \t\t label: 'Outdoor Temp',\n// \t\t data: temp,\n// \t\t borderColor: '#FFC0CB',\n// \t\t borderWidth: 1,\n// \t\t fill: false,\n// \t\t pointRadius: 0.5\n// \t };\nreturn msg;","outputs":1,"noerr":0,"x":930,"y":220,"wires":[["408ffc58.25da44"]]},{"id":"408ffc58.25da44","type":"function","z":"24231751.e39998","name":"combine temps","func":"//context.data = context.data || {};\ncontext.set('data', context.get('data') || {});\n\nswitch (msg.topic) {\n    case \"indoor_temp\":\n        //data.indoor_temp = msg.payload;\n        context.get('data').indoor_temp = msg.payload;//data.indoor_temp;\n        //msg = null;\n        break;\n    case \"outdoor_temp\":\n        //data.outdoor_temp = msg.payload;\n        context.get('data').outdoor_temp = msg.payload;//data.outdoor_temp;\n        //msg = null;\n        break;\n        \n    default:\n        //msg = null;\n    \tbreak;\n\n}\n\nif(context.get('data').indoor_temp != null && context.get('data').outdoor_temp != null ) {\n\t\n\tconsole.log(\"hello1\");\n\tconsole.log(context.get('data').indoor_temp);\n\tconsole.log(\"hello2\");\n\tconsole.log(context.get('data').outdoor_temp);\n\tconsole.log(\"hello3\");\n\tmsg2 = msg;\n    msg2.payload = {\n        indoor_temp: context.get('data').indoor_temp,\n        outdoor_temp: context.get('data').outdoor_temp\n    };\n    \n    context.set('data',null);\n\treturn msg2;\n}\n//return msg;","outputs":1,"noerr":0,"x":1160,"y":160,"wires":[["e5fee98c.fde818"]]},{"id":"e5fee98c.fde818","type":"function","z":"24231751.e39998","name":"generate chart scripts","func":"var date = new Date();\nvar curMinute = date.getMinutes();\nvar curSec = date.getSeconds();\n\nvar indoorTemp = msg.payload.indoor_temp;\nvar inTemp = [];\nvar times = [];\nvar i=0;\n\nvar outdoorTemp = msg.payload.outdoor_temp;\nvar outTemp = [];\n\nvar hour = indoorTemp[i].hour;\n\nvar inMinutes = indoorTemp[i].minutes;\nvar outMinutes = outdoorTemp[i].minutes;\n\nvar requiredMins = [];\n\nfor(var minute in inMinutes)\n{\n    if(minute == curMinute)\n    {\n        if(minute != 0)\n            requiredMins.push({\n                minute: minute-1,\n                indoor: inMinutes[minute-1],\n                outdoor: outMinutes[minute-1]\n            });\n        requiredMins.push({\n            minute: minute,\n            indoor: inMinutes[minute],\n            outdoor: outMinutes[minute]\n        });\n        break;\n    }\n}\n\nvar curSec = date.getSeconds();\nvar sec = curSec;\nvar maxSec = 60;\n\nfor(var j=0; j<requiredMins.length; j++)\n{\n    for(var second in requiredMins[j].indoor)\n    {\n        if(requiredMins.length == 1 || (!(j === 0 && second < curSec)))\n        {\n            var time = hour+\":\";\n            var min = requiredMins[j].minute;\n            \n            if(min < 10)\n              time += \"0\"+min+\":\";\n            else time += min+\":\";\n            \n            if(second < 10)\n              time += \"0\"+second;\n            else time += second;\n            \n            times.push(time);\n            inTemp.push(requiredMins[j].indoor[second].inTemp);\n            if(requiredMins[j].outdoor == null)\n                outTemp.push(requiredMins[j-1].outdoor);\n            else\n                outTemp.push(requiredMins[j].outdoor);\n        }\n    }\n}\n\n\nvar data = {\n     labels: times,\n     datasets: [{\n     label: 'Indoor Temp (in Celsius)',\n     data: inTemp,\n     borderColor: '#017afd',\n     backgroundColor: '#017afd',\n     borderWidth: 3,\n     pointRadius: 0.5\n      },\n      {\n\t\t label: 'Outdoor Temp (in Celsius)',\n\t\t data: outTemp,\n\t\t borderColor: '#f1116a',\n\t\t backgroundColor: '#f1116a',\n\t\t borderWidth: 3,\n\t\t pointRadius: 0.5\n\t }]\n };\n// var options =  {\n//   legend: {\n//      display: false,\n//       labels: {\n//          display: false\n//       }\n//   },\n//   scales: {\n//      yAxes: [{\n//       ticks: {\n//          beginAtZero:false,\n//          fontSize: 10,\n//          min: 10,\n//          max: 30\n//       }\n//      }],\n//      xAxes: [{\n//       ticks: {\n//          beginAtZero:true,\n//          fontSize: 8\n//       }\n//      }]\n//   },\n//   animation: {\n//       duration: 0\n//   },\n   //Boolean - If we want to override with a hard coded scale\n//   scaleOverride: true,\n//   //** Required if scaleOverride is true **\n//   //Number - The number of steps in a hard coded scale\n//     scaleSteps: 10,\n// //    //Number - The value jump in the hard coded scale\n//     scaleStepWidth: 10,\n// //    //Number - The scale starting value\n//     scaleStartValue: 0\n// };\n\n//msg.payload.date = indoorTemp[indoorTemp.length - 1].date;\nmsg.payload = JSON.stringify(data);\n//msg.payload.options = JSON.stringify(options);\n\nreturn msg;\n","outputs":1,"noerr":0,"x":1400,"y":160,"wires":[["cbb17036.0480e"]]},{"id":"cbb17036.0480e","type":"http response","z":"24231751.e39998","name":"","statusCode":"","headers":{},"x":1670,"y":160,"wires":[]},{"id":"509d04e0.e35dcc","type":"comment","z":"24231751.e39998","name":"Stats Page - Daily Charts","info":"","x":190,"y":720,"wires":[]},{"id":"d676e793.17a938","type":"function","z":"24231751.e39998","name":"set date and hour query","func":"var curDate = new Date();\n//var curDate = new Date(\"2018-03-28\");\nvar curDay = curDate.getDate();\nvar curMonth = curDate.getMonth()+1;\nvar curYear = curDate.getFullYear();\n\nvar numPrevDays = 7; // Days you want to subtract\nvar firstDate = new Date(curDate.getTime() - (numPrevDays * 24 * 60 * 60 * 1000));\nvar firstDay = firstDate.getDate();\nvar firstMonth = firstDate.getMonth()+1;\nvar firstYear = firstDate.getFullYear();\n\nif(curDay < 10)\n    curDay = \"0\"+curDay;\nif(firstDay < 10)\n    firstDay = \"0\"+firstDay;\n\nif(curMonth < 10)\n    curMonth = \"0\"+curMonth;\nif(firstMonth < 10)\n    firstMonth = \"0\"+firstMonth;\n\nvar curDateString = curDay+\"-\"+curMonth+\"-\"+curYear;\nvar firstDateString = firstDay+\"-\"+firstMonth+\"-\"+firstYear;\n\n\nquery = {\n    date: {\"$gte\":firstDateString,\"$lt\":curDateString}\n};\nconsole.log(JSON.stringify(query))\nmsg.payload = query;\n\nreturn msg;","outputs":1,"noerr":0,"x":416.8984375,"y":787.773250579834,"wires":[["ad76fdd4.88b69"]]},{"id":"ad76fdd4.88b69","type":"mongodb3 in","z":"24231751.e39998","service":"_ext_","configNode":"141ec110.b7ae8f","name":"","collection":"sensor_data","operation":"find.toArray","x":716.8984375,"y":787.773250579834,"wires":[["d29b72da.5d1ff"]]},{"id":"d29b72da.5d1ff","type":"function","z":"24231751.e39998","name":"update chart data","func":"var date = new Date();\nvar curMinute = date.getMinutes();\nvar curSec = date.getSeconds();\n\nvar documents = msg.payload;\nvar powerCon = [];\nvar co2 = [];\nvar humidity = [];\nvar temp = [];\n\nvar days = [];\nvar i=0;\n\nvar numRecordsPower = 0;\nvar numRecordsCo2 = 0;\nvar numRecordsHumidity = 0;\nvar numRecordsTemp = 0;\n\nvar totalPowerCon = 0;\nvar totalCo2 = 0;\nvar totalHumidity = 0;\nvar totalTemp = 0;\n\nvar averagePower = 0.0;\nvar averageCo2 = 0.0;\nvar averageHumidity = 0.0;\nvar averageTemp = 0.0;\n\nvar currentDate = documents[0].date;\n\nfor(i = 0; i < documents.length; i++)\n{\n    var nextDate = documents[i].date;\n    \n    if(nextDate != currentDate)\n    {\n        //from this record, the data of the next day begins\n        //so add whatever calculated so far to the labels and values \n        //and reset everything to calculate the next day's averagePower\n\n        averagePower = totalPowerCon/numRecordsPower;\n        averageCo2 = totalPowerCon/numRecordsCo2;\n        averageHumidity = totalPowerCon/numRecordsHumidity;\n        averageTemp = totalPowerCon/numRecordsTemp;\n        \n        // console.log(\"total: \"+totalPowerCon);\n        // console.log(\"numRecordsPowerPower: \"+numRecordsPower);\n        // console.log(\"averagePower: \"+averagePower);\n        //console.log(\"\\n\");\n        days.push(currentDate);\n        powerCon.push(averagePower);\n        humidity.push(averageHumidity);\n        temp.push(averageTemp);\n        co2.push(averageCo2);\n\n        //reset values\n        averagePower = 0;\n        totalPowerCon = 0;\n        numRecordsPower = 0;\n        currentDate = nextDate;\n    }\n\n    var minutes = documents[i].minutes;\n\n    for(var minute in minutes)\n    {\n        for(var second in minutes[minute])\n        {\n            if(!isNaN(minutes[minute][second].power))\n            {\n                totalPowerCon += minutes[minute][second].power;\n                numRecordsPower += 1;\n            }\n            \n            if(!isNaN(minutes[minute][second].co2))\n            {\n                totalCo2 += minutes[minute][second].co2;\n                numRecordsCo2 += 1;\n            }\n            \n            if(!isNaN(minutes[minute][second].humidity))\n            {\n                totalHumidity += minutes[minute][second].humidity;\n                numRecordsHumidity += 1;\n            }\n            \n            if(!isNaN(minutes[minute][second].temp))\n            {\n                totalTemp += minutes[minute][second].temp;\n                numRecordsTemp += 1;\n            }\n            //console.log(\"totalPowerCon:\"+totalPowerCon);\n        }\n    }\n}\n\nconsole.log(\"total: \"+totalPowerCon);\nconsole.log(\"numRecordsPower: \"+numRecordsPower);\naveragePower = totalPowerCon/numRecordsPower;\nconsole.log(\"averagePower: \"+averagePower);\n\ndays.push(currentDate);\npowerCon.push(averagePower);\nhumidity.push(averageHumidity);\ntemp.push(averageTemp);\nco2.push(averageCo2);\n\nconsole.log(\"days:\");\nconsole.log(days);\nconsole.log(\"co2:\");\nconsole.log(co2);\nconsole.log(\"powerCon:\");\nconsole.log(powerCon);\nconsole.log(\"humidity:\");\nconsole.log(humidity);\nconsole.log(\"temp:\");\nconsole.log(temp);\n\n\n\nvar humidityData = {\n\t\t labels: days,\n\t\t datasets: [{\n\t\t label: 'Humidity',\n\t\t data: humidity,\n\t\t borderColor: 'rgb(54, 162, 235)',\n\t\t backgroundColor: 'rgb(54, 162, 235)',\n\t\t borderWidth: 1,\n\t\t pointRadius: 0.5\n\t }]\n };\n \nvar tempData = {\n\t\t labels: days,\n\t\t datasets: [{\n\t\t label: 'Temperature',\n\t\t data: temp,\n\t\t borderColor: 'rgb(255, 205, 86)',\n\t\t backgroundColor: 'rgb(255, 205, 86)',\n\t\t borderWidth: 1,\n\t\t pointRadius: 0.5\n\t }]\n };\n \nvar powerConData = {\n\t\t labels: days,\n\t\t datasets: [{\n\t\t label: 'Power',\n\t\t data: powerCon,\n\t\t borderColor: 'rgb(75, 192, 192)',\n\t\t backgroundColor: 'rgb(75, 192, 192)',\n\t\t borderWidth: 1,\n\t\t pointRadius: 0.5\n\t }]\n};\n \nvar co2Data = {\n\t\t labels: days,\n\t\t datasets: [{\n\t\t label: 'CO2 Level',\n\t\t data: co2,\n\t\t borderColor: 'rgb(255, 99, 132)',\n\t\t backgroundColor: 'rgb(255, 99, 132)',\n\t\t borderWidth: 1,\n\t\t pointRadius: 0.5\n\t }]\n };\n \nvar options =  {\n\t legend: {\n\t\t display: false,\n\t\t\t labels: {\n\t\t\t\t display: false\n\t\t\t }\n\t },\n\t scales: {\n\t\t yAxes: [{\n\t\t\t ticks: {\n\t\t\t\t beginAtZero:false,\n\t\t\t\t fontSize: 10\n\t\t\t }\n\t\t }],\n\t\t xAxes: [{\n\t\t\t ticks: {\n\t\t\t\t beginAtZero:true,\n\t\t\t\t fontSize: 8\n\t\t\t }\n\t\t }]\n\t },\n\t animation: {\n\t     duration: 0\n\t }\n\t //Boolean - If we want to override with a hard coded scale\n// \t scaleOverride: true,\n// \t //** Required if scaleOverride is true **\n// \t //Number - The number of steps in a hard coded scale\n//  \t scaleSteps: 10,\n// // \t //Number - The value jump in the hard coded scale\n//  \t scaleStepWidth: 10,\n// // \t //Number - The scale starting value\n//  \t scaleStartValue: 0\n};\nmsg.payload = {\n    date: documents[documents.length - 1].date,\n    powerConData: JSON.stringify(powerConData),\n    tempData:JSON.stringify(tempData),\n    co2Data: JSON.stringify(co2Data),\n    humidityData: JSON.stringify(humidityData),\n    options: JSON.stringify(options)\n};\nreturn msg;","outputs":1,"noerr":0,"x":976.8984375,"y":787.773250579834,"wires":[["3e6809b2.30f456"]]},{"id":"efe554df.7a9f18","type":"http in","z":"24231751.e39998","name":"","url":"/dailychartdata","method":"get","upload":false,"swaggerDoc":"","x":176.8984375,"y":787.773250579834,"wires":[["d676e793.17a938"]]},{"id":"3e6809b2.30f456","type":"http response","z":"24231751.e39998","name":"","statusCode":"","headers":{},"x":1156.8984375,"y":787.773250579834,"wires":[]},{"id":"ce518359.61a6c","type":"mongodb3 in","z":"24231751.e39998","service":"_ext_","configNode":"672cf424.6d10bc","name":"","collection":"sensor_data","operation":"find.toArray","x":836.8984375,"y":587.773250579834,"wires":[["84a2f2b0.dd799"]]},{"id":"49b86544.bfaf1c","type":"function","z":"24231751.e39998","name":"set date and hour query","func":"var date = new Date();\nvar day = date.getDate();\nvar month = date.getMonth() + 1;\nvar year = date.getFullYear();\nvar hour = date.getHours();\n\nif(day < 10)\n    day = \"0\"+day;\n\nif(month < 10)\n    month = \"0\"+month;\n\nvar dateString = day+\"-\"+month+\"-\"+year;\n//var dateString = \"28-03-\"+year;\n\nif(hour < 10)\n    hour = \"0\"+hour;    \n//hour=\"16\";   \n\nquery = {\n    date: dateString,\n    hour: hour.toString()\n};\n\nmsg.payload = query;\n\nreturn msg;","outputs":1,"noerr":0,"x":536.8984069824219,"y":587.7732181549072,"wires":[["ce518359.61a6c"]]},{"id":"e2cd9d03.48167","type":"http in","z":"24231751.e39998","name":"","url":"/getco2data","method":"get","upload":false,"swaggerDoc":"","x":306.8984069824219,"y":587.7732181549072,"wires":[["49b86544.bfaf1c"]]},{"id":"84a2f2b0.dd799","type":"function","z":"24231751.e39998","name":"update chart data","func":"var date = new Date();\nvar curMinute = date.getMinutes();\nvar curSec = date.getSeconds();\n\nvar documents = msg.payload;\nvar co2 = [];\nvar maxCo2 = [];\nvar times = [];\nvar i=0;\nfor(i = 0; i < documents.length; i++)\n{\n    var hour = documents[i].hour;\n    var minutes = documents[i].minutes;\n    \n    var requiredMins = [];\n    for(var minute in minutes)\n    {\n        if(minute == curMinute)\n        {\n            if(minute != 0)\n                requiredMins.push({\n                    minute: minute,\n                    values: minutes[minute-1]\n                });\n            requiredMins.push({\n                    minute: minute,\n                    values: minutes[minute]\n                });\n            break;\n        }\n\n    }\n    \n  \tfor(var j=0; j<requiredMins.length; j++)\n  \t{\n        for(var second in requiredMins[j].values)\n        {\n            if(requiredMins.length == 1 || (!(j === 0 && second < curSec)))\n            {\n                var time = hour+\":\";\n                var min = requiredMins[j].minute;\n                \n                if(min < 10)\n                  time += \"0\"+min+\":\";\n                else time += min+\":\";\n                \n                if(second < 10)\n                  time += \"0\"+second;\n                else time += second;\n                \n                times.push(time);\n                co2.push(requiredMins[j].values[second].co2);\n                maxCo2.push(800);\n            }\n        }\n  \t}\n\n}\n\n\nvar data = {\n\t\t labels: times,\n\t\t datasets: [{\n\t\t label: 'CO2 ppm level',\n\t\t data: co2,\n\t\t borderColor: 'rgb(54, 162, 235)',\n         backgroundColor: 'rgb(54, 162, 235)',\n\t\t borderWidth: 3,\n\t\t pointRadius: 2\n\t },{\n\t\t label: 'Max CO2 ppm level',\n\t\t data: maxCo2,\n\t\t borderColor: '#DC143C',\n\t\t borderWidth: 3,\n\t\t fill: false,\n\t\t pointRadius: 0\n\t }]\n };\n// var options =  {\n// \t legend: {\n// \t\t display: false,\n// \t\t\t labels: {\n// \t\t\t\t display: false\n// \t\t\t }\n// \t },\n// \t scales: {\n// \t\t yAxes: [{\n// \t\t\t ticks: {\n// \t\t\t\t beginAtZero:false,\n// \t\t\t\t fontSize: 10,\n// \t\t\t\t min: 10,\n// \t\t\t\t max: 30\n// \t\t\t }\n// \t\t }],\n// \t\t xAxes: [{\n// \t\t\t ticks: {\n// \t\t\t\t beginAtZero:true,\n// \t\t\t\t fontSize: 8\n// \t\t\t }\n// \t\t }]\n// \t },\n// \t animation: {\n// \t     duration: 0\n// \t },\n// \t //Boolean - If we want to override with a hard coded scale\n// \t scaleOverride: true,\n// \t //** Required if scaleOverride is true **\n// \t //Number - The number of steps in a hard coded scale\n//  \t scaleSteps: 10,\n// // \t //Number - The value jump in the hard coded scale\n//  \t scaleStepWidth: 10,\n// // \t //Number - The scale starting value\n//  \t scaleStartValue: 0\n// };\n\nmsg.payload = JSON.stringify({\n    data: data\n//    options: options\n});\nreturn msg;","outputs":1,"noerr":0,"x":1176.8984069824219,"y":587.7732181549072,"wires":[["4d3dfd8c.d023a4"]]},{"id":"ed17efc6.fea81","type":"mongodb3 in","z":"24231751.e39998","service":"_ext_","configNode":"672cf424.6d10bc","name":"","collection":"sample_temp_data","operation":"find.toArray","x":830,"y":460,"wires":[["4df7fd7a.4d6ed4"]]},{"id":"1049e8d4.41eed7","type":"function","z":"24231751.e39998","name":"set date and hour query","func":"var date = new Date();\nvar day = date.getDate();\nvar month = date.getMonth()+1;\nvar year = date.getFullYear();\nvar hour = date.getHours();\n\nif(day < 10)\n    day = \"0\"+day;\n\nif(month < 10)\n    month = \"0\"+month;\n\nvar dateString = day+\"-\"+month+\"-\"+year;\n//var dateString = \"28-03-\"+year;\n\nif(hour < 10)\n    hour = \"0\"+hour;    \n\n//hour = \"16\";\n\nquery = {\n    date: dateString,\n    hour: hour.toString()\n};\n\n\nmsg.payload = query;\n\nreturn msg;","outputs":1,"noerr":0,"x":529,"y":460,"wires":[["ed17efc6.fea81"]]},{"id":"1be1d1f2.03a04e","type":"http in","z":"24231751.e39998","name":"","url":"/getpowerdata","method":"get","upload":false,"swaggerDoc":"","x":296,"y":460,"wires":[["1049e8d4.41eed7"]]},{"id":"4df7fd7a.4d6ed4","type":"function","z":"24231751.e39998","name":"update chart data","func":"var date = new Date();\nvar curMinute = date.getMinutes();\nvar curSec = date.getSeconds();\n\nvar documents = msg.payload;\nvar power = [];\nvar times = [];\nvar i=0;\n\n//curMinute = 42;\nfor(i = 0; i < documents.length; i++)\n{\n    var hour = documents[i].hour;\n    var minutes = documents[i].minutes;\n    \n    hour = \"19\";\n\n    var requiredMins = [];\n    for(var minute in minutes)\n    {\n        if(minute == curMinute)\n        {\n            if(minute != 0)\n                requiredMins.push({\n                    minute: minute-1,\n                    values: minutes[minute-1]\n                });\n            requiredMins.push({\n                    minute: minute,\n                    values: minutes[minute]\n                });\n            break;\n        }\n\n    }\n    console.log(requiredMins);\n  \tfor(var j=0; j<requiredMins.length; j++)\n  \t{\n        for(var second in requiredMins[j].values)\n        {\n            if(requiredMins[j].minute == 0 || (!(j == 0 && second < curSec)))\n            {\n                var time = hour+\":\";\n                var min = requiredMins[j].minute;\n                \n                if(min < 10)\n                  time += \"0\"+min+\":\";\n                else time += min+\":\";\n                \n                if(second < 10)\n                  time += \"0\"+second;\n                else time += second;\n                \n                times.push(time);\n                console.log(requiredMins[j].values[second].watts);\n                power.push(requiredMins[j].values[second].watts);\n            }\n        }\n  \t}\n\n}\n\n\nvar data = {\n\t\t labels: times,\n\t\t datasets: [{\n\t\t label: 'Power in Watts',\n\t\t data: power,\n\t\t borderColor: 'orange',\n\t\t backgroundColor: 'orange',\n\t\t borderWidth: 3,\n\t\t pointRadius: 0.5\n\t }]\n };\n// var options =  {\n// \t legend: {\n// \t\t display: false,\n// \t\t\t labels: {\n// \t\t\t\t display: false\n// \t\t\t }\n// \t },\n// \t scales: {\n// \t\t yAxes: [{\n// \t\t\t ticks: {\n// \t\t\t\t beginAtZero:false,\n// \t\t\t\t fontSize: 10,\n// \t\t\t\t min: 10,\n// \t\t\t\t max: 30\n// \t\t\t }\n// \t\t }],\n// \t\t xAxes: [{\n// \t\t\t ticks: {\n// \t\t\t\t beginAtZero:true,\n// \t\t\t\t fontSize: 8\n// \t\t\t }\n// \t\t }]\n// \t },\n// \t animation: {\n// \t     duration: 0\n// \t },\n// \t //Boolean - If we want to override with a hard coded scale\n// \t scaleOverride: true,\n// \t //** Required if scaleOverride is true **\n// \t //Number - The number of steps in a hard coded scale\n//  \t scaleSteps: 10,\n// // \t //Number - The value jump in the hard coded scale\n//  \t scaleStepWidth: 10,\n// // \t //Number - The scale starting value\n//  \t scaleStartValue: 0\n// };\n\nmsg.payload = JSON.stringify({\n    data: data\n//    options: options\n});\nreturn msg;","outputs":1,"noerr":0,"x":1196,"y":460,"wires":[["59b66ac7.f7ffb4"]]},{"id":"70bd7e70.a06dc","type":"mongodb3 in","z":"24231751.e39998","service":"_ext_","configNode":"141ec110.b7ae8f","name":"","collection":"sample_temp_data","operation":"find.toArray","x":909.9999694824219,"y":339.99996757507324,"wires":[["e76558d3.2c0958"]]},{"id":"d9fd00df.165fe","type":"function","z":"24231751.e39998","name":"set date and hour query","func":"var date = new Date();\nvar day = date.getDate();\nvar month = date.getMonth()+1;\nvar year = date.getFullYear();\nvar hour = date.getHours();\n\nif(day < 10)\n    day = \"0\"+day;\n\nif(month < 10)\n    month = \"0\"+month;\n\nvar dateString = day+\"-\"+month+\"-\"+year;\n//var dateString = \"28\"+\"-03-\"+year;\n\nif(hour < 10)\n    hour = \"0\"+hour;    \n\n//hour = \"16\";\n\nquery = {\n    date: dateString,\n    hour: hour.toString()\n};\n\nmsg.payload = query;\n\nreturn msg;","outputs":1,"noerr":0,"x":582.9999694824219,"y":339.99996757507324,"wires":[["70bd7e70.a06dc"]]},{"id":"38fd9467.770bbc","type":"http in","z":"24231751.e39998","name":"","url":"/gethumidity","method":"get","upload":false,"swaggerDoc":"","x":339.9999694824219,"y":339.99996757507324,"wires":[["d9fd00df.165fe"]]},{"id":"e76558d3.2c0958","type":"function","z":"24231751.e39998","name":"update chart data","func":"var date = new Date();\nvar curMinute = date.getMinutes();\nvar curSec = date.getSeconds();\n\nvar documents = msg.payload;\nvar humidity = [];\nvar times = [];\nvar i=0;\n\n//curMinute = 42;\nfor(i = 0; i < documents.length; i++)\n{\n    var hour = documents[i].hour;\n    var minutes = documents[i].minutes;\n    \n    hour = \"19\";\n    \n    var requiredMins = [];\n    for(var minute in minutes)\n    {\n        if(minute == curMinute)\n        {\n            if(minute != 0)\n                requiredMins.push({\n                    minute: minute-1,\n                    values: minutes[minute-1]\n                });\n            requiredMins.push({\n                    minute: minute,\n                    values: minutes[minute]\n                });\n            break;\n        }\n\n    }\n    console.log(requiredMins);\n  \tfor(var j=0; j<requiredMins.length; j++)\n  \t{\n        for(var second in requiredMins[j].values)\n        {\n            if(requiredMins.length == 1 || (!(j === 0 && second < curSec)))\n            {\n                var time = hour+\":\";\n                var min = requiredMins[j].minute;\n                \n                if(min < 10)\n                  time += \"0\"+min+\":\";\n                else time += min+\":\";\n                \n                if(second < 10)\n                  time += \"0\"+second;\n                else time += second;\n                \n                times.push(time);\n                humidity.push(requiredMins[j].values[second].humidity);\n            }\n        }\n  \t}\n\n}\n\n\nvar data = {\n\t\t labels: times,\n\t\t datasets: [{\n\t\t label: 'Humidity Level',\n\t\t data: humidity,\n\t\t borderColor: '#017afd',\n\t\t backgroundColor: '#017afd',\n\t\t borderWidth: 3,\n\t\t pointRadius: 0.5\n\t }]\n };\n// var options =  {\n// \t legend: {\n// \t\t display: false,\n// \t\t\t labels: {\n// \t\t\t\t display: false\n// \t\t\t }\n// \t },\n// \t scales: {\n// \t\t yAxes: [{\n// \t\t\t ticks: {\n// \t\t\t\t beginAtZero:false,\n// \t\t\t\t fontSize: 10,\n// \t\t\t\t min: 10,\n// \t\t\t\t max: 30\n// \t\t\t }\n// \t\t }],\n// \t\t xAxes: [{\n// \t\t\t ticks: {\n// \t\t\t\t beginAtZero:true,\n// \t\t\t\t fontSize: 8\n// \t\t\t }\n// \t\t }]\n// \t },\n// \t animation: {\n// \t     duration: 0\n// \t },\n// \t //Boolean - If we want to override with a hard coded scale\n// \t scaleOverride: true,\n// \t //** Required if scaleOverride is true **\n// \t //Number - The number of steps in a hard coded scale\n//  \t scaleSteps: 10,\n// // \t //Number - The value jump in the hard coded scale\n//  \t scaleStepWidth: 10,\n// // \t //Number - The scale starting value\n//  \t scaleStartValue: 0\n// };\n\nmsg.payload = JSON.stringify({\n    data: data\n//    options: options\n});\nreturn msg;","outputs":1,"noerr":0,"x":1209.9999694824219,"y":339.99996757507324,"wires":[["e0080eed.d954d"]]},{"id":"77e802f.09aa4fc","type":"comment","z":"24231751.e39998","name":"Humidity Chart","info":"","x":120,"y":340,"wires":[]},{"id":"4d3dfd8c.d023a4","type":"http response","z":"24231751.e39998","name":"","statusCode":"","headers":{},"x":1456.8984375,"y":587.773250579834,"wires":[]},{"id":"59b66ac7.f7ffb4","type":"http response","z":"24231751.e39998","name":"","statusCode":"","headers":{},"x":1456.0000305175781,"y":460.00003242492676,"wires":[]},{"id":"e0080eed.d954d","type":"http response","z":"24231751.e39998","name":"","statusCode":"","headers":{},"x":1490,"y":340,"wires":[]},{"id":"cce6aeb8.16b1f","type":"comment","z":"24231751.e39998","name":"Power Chart","info":"","x":116.00003051757812,"y":460.00003242492676,"wires":[]},{"id":"a9315b4d.d55958","type":"comment","z":"24231751.e39998","name":"CO2 Graph","info":"","x":116.8984375,"y":587.773250579834,"wires":[]},{"id":"b7d1a77a.797478","type":"comment","z":"24231751.e39998","name":"Temperature Live Chart","info":"","x":180,"y":220,"wires":[]},{"id":"672cf424.6d10bc","type":"mongodb3","z":"","uri":"mongodb://localhost:27017/node-red-db","name":"node-red-db","options":"","parallelism":"-1"},{"id":"141ec110.b7ae8f","type":"mongodb3","z":"","uri":"mongodb://localhost:27017/node-red-db","name":"node-red-db","options":"","parallelism":"-1"}]